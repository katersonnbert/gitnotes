

nixpy tutorial:
http://g-node.github.io/nixpy/tutorial.html

A nix file has two main children
- data
- metadata

Information related to data is stored in the data node within a BLOCK.
Each block has a name and a type (e.g. nix.session).


Build nix
- set up required folders for building nix
	cd nix
	mkdir build
	cd build
- set up build for nix (-j defines how many cores should be used)
	cmake ..
	make all -j 16
- set up test
	./TestRunner
- run test, should complete without fail
	ctest
- build and install nix
	sudo make install

Build nixpy
- python setup.py build


once nix and nixpy are built and setup, use ipython in the nixpy dir to check if nixpy works

import nix
f = nix.File.open("myNixFile.h5") // creates new file in nix format
f.close()
exit

to test dependencies, move to the nixpy main directory and run
	python setup.py test
This runs the testsuite for the nixpy project

to test dependencies for python version 3 use
	python -3 setup.py test

to get all files containing search phrase:

grep -r "phrase" [folder1 folder2 ...]



# migrating from python 2.x to 3.x

when running the setup.py test with -3 switch the following messages pop up:

git remote -v




there is a python 2to3 compatibility library to enable code thats runable with both 2.x and 3.x

https://pypi.python.org/pypi/six

http://python-future.org/imports.html




https://code.google.com/p/mutagen/issues/detail?id=27

A test in 2.4:

>>> class InheritedHash(object):
...     def __eq__(self, other): return self.name == other.name
... 
>>> class Unhashable(object):
...     def __hash__(self): raise TypeError("unhashable object")
... 
>>> class SimpleUnhashable(object):
...     __hash__ = None
...
>>> a = InheritedHash()
>>> b = Unhashable()
>>> c = SimpleUnhashable()
>>> d = { a: "whee" }
>>> d = { b: "whee" }
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
  File "<stdin>", line 2, in __hash__
TypeError: unhashable object
>>> d = { c: "whee" }
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
TypeError: 'NoneType' object is not callable






- Files: "Under Python 3, binary files and text files are clearly distinct and mutually incompatible; see the io module for details. Therefore, you must make a decision of whether a file will be used for binary access (allowing to read and/or write binary data) or text access (allowing to read and/or write text data). You should also use io.open() for opening files instead of the built-in open() function as the io module is consistent from Python 2 to 3 while the built-in open() function is not (in Python 3 itâ€™s actually io.open())."




- In src/transmorgify.hpp:120

		#if PY_MAJOR_VERSON > 3
        	return PyInt_FromLong(static_cast<T>(value));
		#else
			return PyLong_FromLong(static_cast<T>(value));
		#endif

can also be just replaced with the following, discarding PyInt completely:
			return PyLong_FromLong(static_cast<T>(value));




- In src/PyValue.cpp: included

#if PY_VERSION_HEX >= 0x03000000

#  define PyString_Check PyUnicode_Check
#  define PyString_FromStringAndSize PyUnicode_FromStringAndSize
#  define PyString_FromString PyUnicode_FromString
#  define PyString_Concat PyUnicode_Concat
#  define PyString_ConcatAndDel PyUnicode_ConcatAndDel

#  define PyInt_Check PyLong_Check
#  define PyInt_AsLong PyLong_AsLong
#  define PyInt_FromLong PyLong_FromLong
#  define PyNumber_Int PyNumber_Long
#  define PyInt_FromString PyLong_FromString
#  define PyInt_Type PyLong_Type
#  define PyString_Type PyUnicode_Type

#endif

at the start,

at line:46

	#if PY_MAJOR_VERSION < 3
		bool verBool = PyInt_Check(value);
	#else
		bool verBool = PyLong_Check(value);
	#endif

and at line:55

    } else if (verBool) {
        #if PY_MAJOR_VERSION < 3
            int64_t conv = extract<int64_t>(value);
        #else
            long conv = extract<long>(value);
        #endif

- In src/PyDataSet.cpp:

similar errors, but cannot resolve
http://mail.scipy.org/pipermail/numpy-discussion/2010-December/054350.html
https://github.com/pydata/pandas/issues/3872


For future compatibility use pylint with --py3k flag?
https://pypi.python.org/pypi/pylint

do as next step:
import __futures__ everywhere and check with python build and python -3 switch if its still running

from
http://python-future.org/compatible_idioms.html#strings-and-bytes

cannot do yet without any testing:
basestring

cannot do yet without any testing:
range() if its not used as iterator but to append a list







