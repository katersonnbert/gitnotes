GCA Setup

Ahoi!

ich habe versuchsweise GCA-Web frisch geklont und nochmal von Grund auf
so eingerichtet, dass man die Tests und die Web-App von IDEA und der
Konsole aus starten kann. So geht's:

Konsole:
Damit man GCA-Web von der Konsole aus starten kann, braucht man das
(aktuelle) Activator-Dingens[1]. Das muss man dann nur noch entpacken
(das darin enthaltene 'activator' binary in $PATH eintragen) und dann
'activator' im Projektverzeichnis ausführen:

    $ activator test
    oder
    $ activator run

Im Prinzip alles genau so wie in der .travis.yml. Damit das klappt muss
lediglich das JDK (7 oder 8) installiert sein. Der Scala-Compiler oder
SBT muss nicht auf dem System installiert sein (wie sich auf Travis
herausgestellt hat, ist das ggf. sogar eher hinderlich).

IDEA (15):
Zunächst muss man das Project importieren, und zwar als SBT Projekt.
Wichtig ist dabei, dass GCA-Web aus zwei Modulen besteht: 'GCA-Web' und
'GCA-Web-build' beide muss man im entsprechenden Dialog für den Import
auswählen.

Um GCA-Web von der IDE aus zu starten, muss man sich manuell eine "Play
2 run configuration" anlegen.

    Run -> Edit Configurations -> + -> Play 2 App -> Namen Eingeben
    -> OK

Um die Tests in IDEA zu starten, einfach mit rechts auf das Verzeichnis
'test' klicken und dann:

    Run -> ScalaTests in 'test'

Grüße,

[1] https://downloads.typesafe.com/typesafe-activator/1.3.7/typesafe-activator-1.3.7-minimal.zip




Allgemein:

JavaScript: read the JavaScript pitfalls presentation. (redmine)


Bestimmte play frameworks brauchen bestimmte sbt versionen, damit die beiden die richtigen sachen bekommen benötigt man activator, das die korrekten sbt's bzw compiler für die sbt's lädt, installiert und aufsetzt,
damit das framework überhaupt arbeiten kann.



# How to set up GCA-Web:

- Get latest activator
- Extract to software/activator_[current_version]
- Update ~/bin/activator Symlink
- Clone GCA-Web to directory of choice
- Open IDEA -> New -> Project from existing source -> Select clone -> create project from existing sources -> Keep name the same -> Overwrite .idea -> Do not select any pre-compiled source files -> finish
- Open Project Structure -> Project -> Select Java version -> Select Project language level 8 -> Apply
- Follow all sbt import Dialogs
- Should have imported 2 modules by the end of the process.

- At the shell to start the project use:
	activator run
- Move to browser
	http://localhost:9000
- Use firefox to debug javascript: activate debugger by ctrl-shift-k

- Use chromium to debug javaScript - activate debugger by ctrl-shift-j
- More info on the debugger:
	http://stackoverflow.com/questions/66420/how-do-you-launch-the-javascript-debugger-in-google-chrome

Test User:
check "Tests:Assets" for users .. should be there once all tests have run successfully at least once.



- Set up DB ... Run all tests to populate the Database
- Intellij supports database ... add db from file, install drivers
- If the tests fail:
-- check, if the correct test unit is selected (requires scala tests instead of e.g. junit)
-- delete all db files and run the tests again - if the jpa.default in conf.application.conf is defaultpersistenceunit, when the tests are run, the or mapper should create every table which it does not encounter.

- Intellij Enterprise is required for support of the play framework, database interaction support and convenience functions.

NOTE: if we cannot connect to an H2 DB with some obscure primary key violation error, IDEA probably uses the wrong drivers for the database. Search the path of the SBT H2 jar from the external libraries.
Use these drivers in the DB settings as H2 DB drivers.

In my case e.g. /home/[username]/.ivy2/cache/com.h2database/h2/jars



Set up infos:

the main setup infos are defined in:
- conf.application.conf (requires conf.META-INF.orm.xml & conf.META-INF.persitence.xml for the setup of the OR Mapper)
- conf.play.plugins (additional plugins - also states the order in which the plugins are started. play starts plugins of its own, so the defined order for additional should not be too low)
- conf.routes
- project.build.properties
- project.plugin.sbt
- build.sbt





# DataBase:
The project uses hibernate to map classes to the used database.
- H2 ... development
- Postgres ... production

- to switch the Database, add a file "application.dev.conf" or "application.prod.conf" to the "conf" folder which contain the proper access settings for a different database.

- An example additional setup file to use postgres is "application.prod.example.conf"
- If we want to use postgres, create an empty postgres database with an owner
	- change db.default.url to new database
	- change db.default.user and password to new database owner
	- IMPORTANT! if the database already contains data that should not be overwritten, change jpa.default to "prodPersistenceUnit"
	- If no mailserver is available, set smtp.mock to "true"

Mapping Models to DB:
The models for the individual tables of the database are found in app/models/ - the main class here is app/models/AbstractState.scala

Queries:
All queries to the database can be found in app/service/


# HTML templates:
- All HTML templates can be found at app/views
	*.scala.html ... these are the html templates, can be accessed via included .js files and JQuery $

- All javascripts used in these templates can be found in app/assets/javascript
- All additional stylesheets for these templates can be found in app/assets/stylesheets



# Data flow:

e.g. conference field iOSApp

field in app/views/dashboard/admin/conference.scala.html -> data-bind:"value: iOSApp" ... mapped to JSON object.
via utils/serializer ... class ConferenceFormat ... read and write ... maps JSON Object field "iOSApp" to Backend class field member "iOSApp"
Scala class app/models/conference.scala ... here is the field member "iOSApp" that by some magic is converted to the actual database field.



# JavaScript: works with JQuery 

$ ... returns JQuery object

e.g.

$(document.getElementById('someId'))



# Play framework templates

To create html pages, play uses a templating framework that is similar to scala.

In a *.scala.html template page, html can be written plainly. When the page is compiled, these parts will be converted to print(plainHTML)

If the compiler encounters an "@", it treats everything after this as scala code and creates functions out of them.

e.g.
	@if(some.text != null) {
		<p>@some.text</p>
	}
creates a function: func (s: String) = {
	print("<p>")
	print(s)
	print("</p>")
}


#JSON

The play framework mainly uses JSON for transmitting information from server to client and vice versa.

The two main converters are:
	json.parse(stuff)	... parse text to JSON
	Json.stringify(stuff) ... convert JSON to text
These two do the exact (?) opposite of each other.


# Good to knows:
ctime, mtime, atime:

ctime: changes when file attributes are changed e.g. file owner, file permissions, file modification.
mtime: changes when the contents of a file are changed.
atime: changes whenever a file is accessed.

http://www.linux-faqs.info/general/difference-between-mtime-ctime-and-atime


# Installation at the production server:

Hallo,

    wir können es Dienstag oder Mittwoch zusammen du und ich am Telefon
    machen. 

Dienstag würde bei mir gut passen. Wäre 10:00 Uhr OK?

    Würde es als Backup reichen, wenn ich ein Datenbank dump und
    eine Kopie des Verzeichnis, wo GCA installiert ist, mache?

Ja das reicht aus.

    Für die DB-Schema Änderungen hätte ich gerne sie als SQL-Skript im
    Voraus, so dass wir keine Zeit mit Dateienaustausch verschwenden.

Die Migration des Schemas besteht aus zwei Schritten. Im ersten Schritt
wird das Schema von GCA-Web selbst geändert (wenn die neue Version von
GCA mit der richtigen Konfiguration gestartet wird).
Der 2. Schritt besteht aus einem kurzen SQL-Script welches z.B. neue
Felder in der DB mit sinnvollen Werten füllt. Dieses Script werde ich
dir heute im Laufe des Tages zuschicken.

    Ich nehme an, ihr habt alles schon bei euch in pre-production getestet,
    oder? Also die ganze Gelegenheit sollte ein 10-minutigen Sache sein,
    oder?


Eigentlich sollten 10 Minuten ausreichen, aber bring lieber etwas mehr
Zeit mit - nur für den Fall dass doch was schief läuft.

Viele Grüße,




wir können es Dienstag oder Mittwoch zusammen du und ich am Telefon machen. Würde es als Backup reichen, wenn ich ein Datenbank dump und eine Kopie des Verzeichnis, wo GCA installiert ist, mache?

Für die DB-Schema Änderungen hätte ich gerne sie als SQL-Skript im Voraus, so dass wir keine Zeit mit Dateienaustausch verschwenden.

Ich nehme an, ihr habt alles schon bei euch in pre-production getestet, oder? Also die ganze Gelegenheit sollte ein 10-minutigen Sache sein, oder?

Ciao,


    Hallo Admins,
    in den letzten Wochen haben wir an GCA-Web gearbeitet: ein paar Fehler
    beseitigt und einige neue Features hinzugefügt. Damit sind wir jetzt
    soweit fertig, sodass ein neues Release von GCA-Web Anfang nächster
    Woche deployed werden kann. Im Großen und Ganzen wird es wieder das
    selbe Prozedere sein wie im letzten Jahr. Aber es gibt auch wieder auch
    ein paar kleine Änderungen am DB-Schema, die berücksichtigt werden
    müssen.

    Wie sieht es bei euch aus? Habt ihr nächste Woche Zeit die Installation
    der neuen Version vorzunehmen? Und wie würdet ihr dabei gerne vorgehen:
    soll ich euch eine Schritt-für-Schritt-Anleitung zukommen lassen, oder
    sollen wir die Installation lieber gemeinsam per Hangout/Telefon machen?

    Ein schönes Wochenende und viele Grüße,
